## -- RMeCab :　テキストマイニング用のパッケージ
library(RMeCab)
library(ggbiplot)
library(Rtsne)
## ||||||||||||||||||||||||||||||||||||||||| ##
## -- 結果の保存先フォルダ
dir <- make.dir('02_output')
## -- RMeCab :　テキストマイニング用のパッケージ
library(AnalysisHelper)
library(RMeCab)
library(ggbiplot)
library(Rtsne)
## ||||||||||||||||||||||||||||||||||||||||| ##
## -- 結果の保存先フォルダ
dir <- make.dir('02_output')
## -- テキストデータの取得（01_...R の結果）
fl <- list.files("01_output/Table", full.names = TRUE)
mecab_res <- ngram <- NULL
for(l in 1:length(fl)) {
year <- substr(strsplit(fl[l], '/')[[1]][3], 1,2)
## -- 形態素解析
word_freq <- RMeCabFreq(fl[l])
mecab_res[[sprintf('%s', year)]] <- word_freq
## -- N-gram
ngram[[sprintf('%s', year)]] <- NgramDF(fl[l], type=1, pos=c("名詞"), N=2)
}
## ||||||||||||||||||||||||||||||||||||||||| ##
## -- document Term
docMatrix_res <- docMatrix("01_output/Table", pos = c("サ変","名詞"),
minFreq = 10)
docmat <- t(as(docMatrix_res,"matrix"))
colnames(docmat)
saveRDS(docmat, sprintf('%s/docMatrix_result.rds', dir$rdsdir))
## -- RMeCab :　テキストマイニング用のパッケージ
library(RMeCab)
library(ggplot2)
library(cowplot)
library(AnalysisHelper)
library(ggbiplot)
## ||||||||||||||||||||||||||||||||||||||||| ##
dir=make.dir('05_output')
## -- 各年ごとの単語頻度
docMat_res <- readRDS('02_output/RDS/docMatrix_result.rds')
## -- 割合に変換
docmat <- docMat_res/rowSums(docMat_res)
colnames(docmat)
## -- 2年以上でてきたかつ全ての年に出ていない単語を選択
docmat <- (docmat[,colSums(docmat>0)>1 & colSums(docmat>0) < nrow(docmat)])
docmat <- docmat[,-grep('，', colnames(docmat))]
dim(docmat)
colnames(docmat)
colnames(docmat)=="捕食"
sum(colnames(docmat)=="捕食")
## -- 割合に変換
docmat <- docMat_res/rowSums(docMat_res)
sum(colnames(docmat)=="捕食")
class(docmat)
docmat[,"捕食"]
sum(docmat[,"捕食"]>0)
## -- 2年以上でてきたかつ全ての年に出ていない単語を選択
docmat <- (docmat[,colSums(docmat>0)>1])
docmat <- docmat[,-grep('，', colnames(docmat))]
sum(colnames(docmat)=="捕食")
colnames(docmat)
## ||||||||||||||||||||||||||||||||||||||||| ##
## -- 主成分分析
pca <- prcomp(docmat)
biplot(pca, cex=0.5)
colnames(docmat)
docmat <- docmat[,-grep('，', colnames(docmat))][,-c(1:50)]
## ||||||||||||||||||||||||||||||||||||||||| ##
## -- 主成分分析
pca <- prcomp(docmat)
biplot(pca, cex=0.5)
## -- 割合に変換
docmat <- docMat_res/rowSums(docMat_res)
colnames(docmat)
## -- 2年以上でてきたかつ全ての年に出ていない単語を選択
docmat <- (docmat[,colSums(docmat>0)>1])
docmat <- docmat[,-grep('，', colnames(docmat))][,-c(1:50)]
sum(colnames(docmat)=="捕食")
colnames(docmat)
docmat
## ||||||||||||||||||||||||||||||||||||||||| ##
## -- 主成分分析
pca <- prcomp(docmat)
biplot(pca, cex=0.5)
## ||||||||||||||||||||||||||||||||||||||||| ##
## -- 主成分分析
pca <- prcomp(docmat)
pdf(sprintf('%s/PCA_biplot.pdf', dir$figdir), family="Japan1GothicBBB")
biplot(pca, cex=0.5)
dev.off()
ggbiplot(pcobj = pca, choices = 1:2, obs.scale = 1, var.scale = 1)
## -- PC1 の寄与率
head(pca$rotation[ order(pca$rotation[,1], decreasing=TRUE),1:2], n=30)
## -- プラス方向へのPC２寄与率
head(pca$rotation[ order(pca$rotation[,2], decreasing=TRUE),1:2], n=30)
## -- PC1 の寄与率
head(pca$rotation[ order(pca$rotation[,1], decreasing=TRUE),1:2], n=30)
## -- プラス方向へのPC２寄与率
head(pca$rotation[ order(pca$rotation[,2], decreasing=TRUE),1:2], n=30)
## -- マイナス方向へのPC２寄与率
tail(pca$rotation[ order(pca$rotation[,2], decreasing=TRUE),1:2], n=30)
tail(pca$rotation[ order(pca$rotation[,1], decreasing=TRUE),1:2], n=30)
## -- PC1 の寄与率
head(pca$rotation[ order(pca$rotation[,1], decreasing=TRUE),1:2], n=30)
tail(pca$rotation[ order(pca$rotation[,1], decreasing=TRUE),1:2], n=30)
## -- プラス方向へのPC２寄与率
head(pca$rotation[ order(pca$rotation[,2], decreasing=TRUE),1:2], n=30)
## -- マイナス方向へのPC２寄与率
tail(pca$rotation[ order(pca$rotation[,2], decreasing=TRUE),1:2], n=30)
write.csv(pca$rotation, "Table/PCA寄与率.csv", fileEncoding = "Shift-JIS")
## ||||||||||||||||||||||||||||||||||||||||| ##
df <- data.frame(year=rownames(pca$x), path=as.numeric( gsub('.txt','', rownames(pca$x)) ), pca$x)
g <- ggplot(df, aes(x=PC1, y=PC2, color=path, label=path))+
geom_text()+
geom_path()+
guides(color='none')
g2 <- ggplot(df, aes(x=PC1, y=PC3, color=path, label=path))+
geom_text()+
geom_path()+
guides(color='none')
ggsave(plot=plot_grid(g, g2), filename=sprintf('%s/PCA_ggplot.pdf', dir$figdir),
w=10, h=5)
pcobj=pca
choices = 1:2
scale = 1
pc.biplot = TRUE
obs.scale = 1 - scale
var.scale = scale
groups = NULL
ellipse = FALSE
ellipse.prob = 0.68
labels = NULL
labels.size = 3
alpha = 1
var.axes = TRUE
circle = FALSE
circle.prob = 0.69
varname.size = 3
varname.adjust = 1.5
varname.abbrev = FALSE
library(ggplot2)
library(plyr)
library(scales)
library(grid)
library(purrr)
stopifnot(length(choices) == 2)
if (inherits(pcobj, "prcomp")) {
nobs.factor <- sqrt(nrow(pcobj$x) - 1)
d <- pcobj$sdev
u <- sweep(pcobj$x, 2, 1/(d * nobs.factor), FUN = "*")
v <- pcobj$rotation
top5 = \(x) c(order(x)[1:5], order(x, decreasing = TRUE)[1:5])
rowid = apply(v[,1:2], 2, top5) |> as.vector() |> unique()
v = v[rowid,]
}
choices <- pmin(choices, ncol(u))
df.u <- as.data.frame(sweep(u[, choices], 2, d[choices]^obs.scale,
FUN = "*"))
v <- sweep(v, 2, d^var.scale, FUN = "*")
df.v <- as.data.frame(v[, choices])
names(df.u) <- c("xvar", "yvar")
names(df.v) <- names(df.u)
if (pc.biplot) {
df.u <- df.u * nobs.factor
}
r <- sqrt(qchisq(circle.prob, df = 2)) * prod(colMeans(df.u^2))^(1/4)
v.scale <- rowSums(v^2)
df.v <- r * df.v/sqrt(max(v.scale))
if (obs.scale == 0) {
u.axis.labs <- paste("standardized PC", choices, sep = "")
}else {
u.axis.labs <- paste("PC", choices, sep = "")
}
u.axis.labs <- paste(u.axis.labs, sprintf("(%0.1f%% explained var.)",
100 * pcobj$sdev[choices]^2/sum(pcobj$sdev^2)))
df.u$labels <- gsub(".txt", " th", rownames(df.u))
if (varname.abbrev) {
df.v$varname <- abbreviate(rownames(v))
}else {
df.v$varname <- rownames(v)
}
df.v$angle <- with(df.v, (180/pi) * atan(yvar/xvar))
df.v$hjust = with(df.v, (1 - varname.adjust * sign(xvar))/2)
g <- ggplot(data = df.u, aes(x = xvar, y = yvar)) +
xlab(u.axis.labs[1]) +
ylab(u.axis.labs[2]) + coord_equal()
g <- g + geom_segment(data = df.v,
aes(x = 0, y = 0,
xend = xvar, yend = yvar),
arrow = arrow(length = unit(1/2,"picas")), color = muted("red"))+
geom_text(aes(label = labels, color = groups), size = labels.size)
g + geom_text(data = df.v, aes(label = varname,
x = xvar, y = yvar, angle = angle, hjust = hjust),
color = "darkred", size = varname.size)
(g + geom_text(data = df.v, aes(label = varname,
x = xvar, y = yvar, angle = angle, hjust = hjust),
color = "darkred", size = varname.size))|>
ggsave('test_pca.pdf')
(g + geom_text(data = df.v, aes(label = varname,
x = xvar, y = yvar, angle = angle, hjust = hjust),
color = "darkred", size = varname.size))|>
ggsave(filename='test_pca.pdf')
warnings()
(g + geom_text(data = df.v, aes(label = varname,
x = xvar, y = yvar, angle = angle, hjust = hjust),
color = "darkred", size = varname.size))|>
ggsave(filename='test_pca.pdf', fileEncoding = "Shift-JIS"))
(g + geom_text(data = df.v, aes(label = varname,
x = xvar, y = yvar, angle = angle, hjust = hjust),
color = "darkred", size = varname.size))|>
ggsave(filename='test_pca.pdf', fileEncoding = "Shift-JIS")
(g + geom_text(data = df.v, aes(label = varname,
x = xvar, y = yvar, angle = angle, hjust = hjust),
color = "darkred", size = varname.size))|>
ggsave(filename='test_pca.pdf')
